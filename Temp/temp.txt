[NTSCU][32-bit (base) Pointer:PlayerData-Player1] -> [Struct:PlayerData]
- This pointer is always valid (SinglePlayer & Multiplayer)

+0x14 - [32-bit (layer-1) Pointer]
.
.+0x4 - [32-bit (layer-2) Pointer]
..+0x0 - [Float:PlayerMaxHealth |32-bit]
.
.+0xC - [Float:PlayerHealth |32-bit]
.
.+0x80 - [32-bit (layer-2) Pointer] -> [Struct:RapidFireData]
..+0x140 - [bit0 BitFlag:IsRapidFireModeActive |32-bit]
.| - RapidFireMode is activated whilst in AimingMode + doing a half circle with the analog stick
.| - This uses SpecialGauge 

+0x70 - [32-bit (layer-1) Pointer:PlayerData_L1-70]
| - This pointer is only valid when the player is on Horseback
| - This pointer is zeroed out (0x0) when not on Horseback
.+0x8 - [32-bit (layer-2) Pointer]
..+0xC - [32-bit (layer-3) Pointer]
...+0x90 - [16-byte Struct(Coordinates):PlayerOnHorsebackLocation]
...| - Definition of [Struct:Coordinates] below

+0x130 - [32-bit:Money_MPkills]
| - In SinglePlayer: this value regulates the Player's money as cents (refering to the Cash display)
| - In SinglePlayer: when this value > 0x1F3 (499, $49.09), then the message, "You Win!!!", is displayed + player gains insane amount of money for free. After a few seconds the Level resets (just like a Reset via PauseMenu)
|
| - In Multiplayer: this value regulates the Player's killCount (refering to the sheriff badge count display, when killing a player)
| - In Multiplayer: Once this value hits 0x2, the Player/team wins the match. After a few seconds the match resets.

+0x134 - [bit0 BitFlag:IsPlayerOnHorseback |32-bit]

+0x13C - [32-bit (layer-1) Pointer]
.+0xC - [32-bit (layer-2) Pointer]
..+0x90 - [16-byte Struct(Coordinates):PlayerLocation]
..| - Definition of [Struct:Coordinates] below
.
.+0x48 - [32-bit (layer-2) Pointer] -> [Struct:SpinFireData]
..+0x28 - [32-bit Flag:IsSpinFireAnimationActive]
..| 0xFFFFFFFF => inactive
..| 0x0 => active
.
.+0x64 - [32-bit (layer-2) Pointer]
..+0x134 - [32-bit (layer-3) Pointer] -> [Struct:CharacterAnimationData]
...
...+0x10 - [Float:AnimationKeyFrame(functional)]
...| - This float represents a specific point in the animation timeline
...| - FloatRange [0.0 --- 0.999]: 0.0 is start of animation; 0.999 is end of animation
...+0x14 - [Float:AnimationKeyFrame(copy)]
...| - This float represents a specific point in the animation timeline, but copies float above
...
...+0x18 - [32-bit (layer-4) Pointer]
....+0x0 - [32-bit (layer-5) Pointer]
.....+0x0 - [32-bit (layer-6) Pointer]
......+0x0 - [Variable Size ASCII:Active_CharacterAnimationID]
......| - Pointer chain is only valid when non-repeating CharacterAnimation is being played
......| - List of CharacterAnimationIDs below
..
..+0x144 - [32-bit (layer-3) Pointer] -> [Struct:CharacterAnimationData]
...+0x40 - [32-bit (layer-4) Pointer]
....+0xFFFFFFD4 - [32-bit (layer-5) Pointer] 
....| - YES, use a negative offset. I did not find any other decent pointer, which points a few bytes lower.
.....+0x0 - [bit0 BitFlag:IsHorseHugging |32-bit]
.....| - HorseHugging animation can be activated whilst on a horse and pressing and holding X or R1
.....| - HorseHugging animation feels like a prototype cover system on the horse
.....| - There are 3 variations of this animation: Duck, HangLeft, HangRight
.....+0x4 - [Lower4:HorseHuggingState |32-bit]
.....| 0x0 => Duck
.....| 0x1 => HangRight
.....| 0x2 => HangLeft


+0x170 - [32-bit (layer-1) Pointer] -> [Struct:ShootingStats]
| - Definition of [Struct:ShootingStats] below

+0x208 - [bit0 BitFlag:IsAimingModeActive(preferred) |32-bit]
+0x220 - [bit0 BitFlag:IsAimingModeActive(alt1) |32-bit]
+0x224 - [bit0 BitFlag:IsAimingModeActive(alt1) |32-bit]

+0x474 - [32-bit:RapidFireMode_TargetsPainted] 
| - This value counts the number of targets painted whilst RapidFireMode is active 

+0x4E8 - [32-bit (layer-1) Pointer:HUD_AmmoHealth] -> [Struct:HUD_AmmoHealth]
| - Definition of [Struct:HUD_AmmoHealth] below

+0x6DC - [32-bit (layer-1) Pointer] -> [Struct:RapidFireData]
.+0x140 - [bit0 BitFlag:IsRapidFireModeActive |32-bit]
.| - RapidFireMode is activated whilst in AimingMode + doing a half circle with the analog stick
.| - This uses SpecialGauge
.| 0 => inactive (This flag turns 0, a few frames after the first shot is fired on a painted target)
.| 1 => active


[Definition Struct:Coordinates |16-byte]
|''''''''''''''''''''''''''''''''
|+0x0 - [32-bit Float:W_Component]
|Â¨| - This is perspective divide component. It has a role in perspective projection, where the final coordinates are obtained by dividing X, Y, Z by W.
|+0x4 - [32-bit Float:Y_Coordinate]
|+0x8 - [32-bit Float:Z_Coordinate]
|+0xC - [32-bit Float:X_Coordinate]
'

[Definition Struct:ShootingStats |??-byte]
|''''''''''''''''''
| - These offsets are only functional when in SinglePlayer
| - These stats reset to 0x0 when PauseMenu->Reset OR when dying
| - The pointed to data is different depending on SinglePlayer or Multiplayer
| - For some reason While in Multiplayer ShootingStats are only saved ShotsFired, any other stats are not saved. Kills are saved somewhere else $0x421868.
| - Total Shots Hit: [32-bit:ShotsHitBody] + [32-bit:ShotsHitHead]
|
|+0x0 - [32-bit:ShotsFired]
|+0x2C - [32-bit:ShotsHitBody]
|| - Only counts hits on the body, NOT headshots
|+0x30 - [32-bit:ShotsHitHead]
|| - Counts headshot-kills & normal headshots
|+0x5C - [32-bit:Kills]
'

[Definition Struct:HUD_AmmoHealth |532-byte]
|''''''''''''''''''''''''''''''''''''''
| - This struct controls the UI display in the bottom-left
|
|+0x6C - [Float:SpecialMoveGauge(display) |32-bit]
|| - FloatRange [0.0 --- 1000.0]; Each 100.0 is counts a number on the SpecialGauge
|
|+0x74 - [Float:PlayerHealth(display) |32-bit]
|| - This float regulates how much of the HP bar is filled. Pretty much correlates to effective PlayerHealth
|| - FloatRange [0.0 --- 1.0]; MaxHP = 1.0
|
|+0xB0 - [32-bit:LoadedAmmoCount_Back(display)]
|| - When the Player is using dual wielded weapons, this value becomes active. It counts how many bullets are loaded inside the secondary weapon. (the display of bullet icons behind the front display)
|
|+0xB4 - [32-bit:LoadedAmmoCount_Front(display)]
|| - This value regulates the display of how many bullets icons are displayed. This pretty much correlates how many bullets are loaded inside the weapon. 
|| - When Player has single shot weapon equipped (eg. throwables like dynamite or knife), when this value becomes 0x0, then the display greys out the weapon icon until weapon is reloaded
|
|+0xC0 - [32-bit:ReserveAmmoCount(display)]
|| - This value controls the number display of how many reserve bullets the Player has in inventory
|
|+0xC8 - [8-bit:Equipped_WeaponID(non-functional) |32-bit]
|| - This value correlates to the equipped WeaponID
|| - WeaponIDs listed below
'

# CharacterAnimationID
|(only lists IDs useful for achievement logic)
|''''''''''''''''''''
| "red_stn_idl_11" => Tipping hat (Press and hold X or R1 whilst standing still)
| "red_stn_idl_12" => Talk animation (Press X near and facing friendly NPC)
| "red_upp_jump" => Jump whilst standing still
| "red_for_jump" => Jump whilst moving forward
| "red_fnc_pst_vlt => Fence vault
| "red_rgt_dge" => Dodge (Press X or R1 whilst walking)
'

# WeaponIDs (hex)
|(list incomplete)
|''''''''''''''''''
| 0x0 => SingleRevolver
| 0x1 => DualRevolvers
| 0x2 => Shotgun
| 0x3 => Rifle
| 0x4 => Knife
| 0x5 => Dynamite
| ...??
'